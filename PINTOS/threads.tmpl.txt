			+--------------------+
			|        CSE231      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.


Agnel Aaron <email@domain.example>
Bharath Kumar Thulasidoss <bharath17035@iiitd.ac.in>
Shahid Nawaz Khan <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
>> Resources:
>> https://github.com/muhammadzaheer/pintOS
>> https://github.com/Waqee/Pintos-Project-1
>> http://stuartharrell.com/blog/2016/12/16/efficient-alarm-clock/
>> https://www.cse.iitd.ernet.in/~sbansal/os/previous_years/2011/pintos/doc/pintos_html/lib_2kernel_2list_8c-source.html#l00169
>> https://tssurya.wordpress.com/tag/pintos-project-1/

---- TEST CASES ----

>> All test cases are passing.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In timer.c

>> Global variable
	>> struct list sleeptime ( A list for maintaining sleeping threads )

In thread.h

>> In thread structure
	>>  int64_t wakeuptime ( The sleeptime for each thread )

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

>> Steps in timer_sleep:

	1) If the sleep time is zero or less then 0, then the function performs no action for that thread.
	2) Now we make sure that the interupts are switched on.
	3) Now we call a function sleep_until_calc(ticks).
	4) The ticks passed to the function has value specified when calling sleep time + the global tick count.
	5) The function disables interupts, gets current thread and sets its wakeuptime to tickstosleep.
	6) Then the current thread is added into the sleeplist in a sorted order by the function 
	   list_insert_ordered_define();
	7) The current thread is blocked and interupts are enabled.

>> Steps in timer_interrupt:

	1) Increment global ticks and call wakeup() function for the sleeplist.
	2) Now Iterate through the sleeplist and check is their wakeuptime is over.
	3) keep removing threads from sleeplist and unblock them if wakeputime is over.
	4) While unblocking, we add the thread to the ready list in a way which keeps the ready list sorted in 				descending order according to priority.
	4) If wakeuptime is not over then we break and the remaining threads sleep. This works because list is sorted.
	5) Now thread_tick() is called and if current timeslice for current thread is over, then before the interrupt 		returns the current thread is yielded and the scheduler schedules the thread with the next highest priority.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

	The time is minimised in timer_interrupt, as the entire sleeplist will not be checked again, only those who have crossed their wakeuptime are added to the readylist whereas the rest remain and are not iterated by the timer interrupt handler hence optimizing it.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
   
   Interupts blocking means addition to sleep list is protected, so only one thread is added at a time.
   



>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
 
   As interupts are blocked, another thread cannot be put to sleep at the same time. If this was permitted then the wakeuptime will be altered ( as this is global ) when the interupt returns to the thread and hence it might not sleep for the specified time also the timer interupt also modifies sleep list which should not be permitted at the same time.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

    This design uses interupts effiiently to avoid race conditions and also the time spent in the timer interupt is less due to sleeplist being sorted, which is particularly usefull when there are a lot of threads which are sleeping. Also this design eliminates busywaiting.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
